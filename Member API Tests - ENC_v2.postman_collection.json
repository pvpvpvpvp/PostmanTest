{
	"info": {
		"_postman_id": "7e49d710-2aa9-4f4c-b38e-b4f1a92a1928",
		"name": "Member API Tests - ENC",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38203046"
	},
	"item": [
		{
			"name": "Login Member",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"// 복호화된 응답 가져오기",
							"var decryptedResponse = pm.environment.get(\"decryptedResponse\");",
							"var jsonData = JSON.parse(decryptedResponse);",
							"",
							"// 응답이 JSON 형식인 경우 결과 코드 체크",
							"pm.expect(jsonData).to.have.property('resultCode');",
							"pm.expect(jsonData.resultCode).to.eql('0000');",
							"",
							"pm.environment.set(\"memberId\", jsonData.data);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "enc",
						"value": "true"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"nickName\": \"testUser\", \"password\": \"testPassword\"}"
				},
				"url": {
					"raw": "{{baseUrl}}/members/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"members",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Join Member",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 복호화된 응답 가져오기",
							"var decryptedResponse = pm.environment.get(\"decryptedResponse\");",
							"var jsonData = JSON.parse(decryptedResponse);",
							"",
							"pm.expect(jsonData).to.have.property('resultCode');",
							"pm.expect(jsonData.resultCode).to.eql('0000');",
							"",
							"pm.environment.set(\"memberId\", jsonData.data);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "enc",
						"value": "true",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"Test User\", \"password\": \"testPassword\", \"nickName\": \"testUser\"}"
				},
				"url": {
					"raw": "{{baseUrl}}/members/join",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"members",
						"join"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Member",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 복호화된 응답 가져오기",
							"var decryptedResponse = pm.environment.get(\"decryptedResponse\");",
							"var jsonData = JSON.parse(decryptedResponse);",
							"",
							"pm.expect(jsonData).to.have.property('resultCode');",
							"pm.expect(jsonData.resultCode).to.eql('0000');"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							" var requestBodyJson = JSON.parse(pm.request.body.toJSON().raw);\r",
							"    console.log(\"requestBodyJson: \", requestBodyJson);\r",
							"  \r",
							"    const memberId = requestBodyJson.id;\r",
							"    console.log(\"memberId: \", memberId);\r",
							"\r",
							"    // 6. Request Body 재 설정\r",
							"    requestBodyJson.id = pm.environment.get(\"memberId\");\r",
							"    console.log(\"변경된 요청 requestBodyJson: \", requestBodyJson);\r",
							"    // 7. 실제 body 값으로 업데이트\r",
							"    pm.request.body.update(JSON.stringify(requestBodyJson));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "enc",
						"value": "true",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"id\": 1, \"name\": \"Updated User\", \"password\": \"newPassword\", \"nickName\": \"updatedUser\"}"
				},
				"url": {
					"raw": "{{baseUrl}}/members/update",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"members",
						"update"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Member",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 복호화된 응답 가져오기",
							"var decryptedResponse = pm.environment.get(\"decryptedResponse\");",
							"var jsonData = JSON.parse(decryptedResponse);",
							"",
							"pm.expect(jsonData).to.have.property('resultCode');",
							"pm.expect(jsonData.resultCode).to.eql('0000');"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							" var requestBodyJson = JSON.parse(pm.request.body.toJSON().raw);\r",
							"    console.log(\"requestBodyJson: \", requestBodyJson);\r",
							"  \r",
							"    const memberId = requestBodyJson.id;\r",
							"    console.log(\"memberId: \", memberId);\r",
							"\r",
							"    // 6. Request Body 재 설정\r",
							"    requestBodyJson.id = pm.environment.get(\"memberId\");\r",
							"    console.log(\"변경된 요청 requestBodyJson: \", requestBodyJson);\r",
							"    // 7. 실제 body 값으로 업데이트\r",
							"    pm.request.body.update(JSON.stringify(requestBodyJson));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "enc",
						"value": "true",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"id\": 1}"
				},
				"url": {
					"raw": "{{baseUrl}}/members/leave",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"members",
						"leave"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login Non-Existent User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 복호화된 응답 가져오기",
							"var decryptedResponse = pm.environment.get(\"decryptedResponse\");",
							"var jsonData = JSON.parse(decryptedResponse);",
							"",
							"pm.expect(jsonData).to.have.property('resultCode');",
							"pm.expect(jsonData.resultCode).to.eql('0001');"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "enc",
						"value": "true",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"nickName\": \"nonExistentUser\", \"password\": \"testPassword\"}"
				},
				"url": {
					"raw": "{{baseUrl}}/members/login?",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"members",
						"login"
					],
					"query": [
						{
							"key": "",
							"value": null
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Login with Wrong Password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"// 복호화된 응답 가져오기",
							"var decryptedResponse = pm.environment.get(\"decryptedResponse\");",
							"var jsonData = JSON.parse(decryptedResponse);",
							"",
							"pm.expect(jsonData).to.have.property('resultCode');",
							"pm.expect(jsonData.resultCode).to.eql('0002');",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "enc",
						"value": "true",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"nickName\": \"testUser\", \"password\": \"wrongPassword\"}"
				},
				"url": {
					"raw": "{{baseUrl}}/members/login?",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"members",
						"login"
					],
					"query": [
						{
							"key": "",
							"value": null
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Join Member with Existing Nickname",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"// 복호화된 응답 가져오기",
							"var decryptedResponse = pm.environment.get(\"decryptedResponse\");",
							"var jsonData = JSON.parse(decryptedResponse);",
							"",
							"    pm.expect(jsonData).to.have.property('resultCode');",
							"    pm.expect(jsonData.resultCode).to.eql('0003');"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "enc",
						"value": "true",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"Another User\", \"password\": \"testPassword\", \"nickName\": \"testUser\"}"
				},
				"url": {
					"raw": "{{baseUrl}}/members/join",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"members",
						"join"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Member with Non-Existent ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"// 복호화된 응답 가져오기",
							"var decryptedResponse = pm.environment.get(\"decryptedResponse\");",
							"var jsonData = JSON.parse(decryptedResponse);",
							"",
							"    pm.expect(jsonData).to.have.property('resultCode');",
							"    pm.expect(jsonData.resultCode).to.eql('0001');",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "enc",
						"value": "true",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"id\": 9999, \"name\": \"Updated User\", \"password\": \"newPassword\", \"nickName\": \"updatedUser\"}"
				},
				"url": {
					"raw": "{{baseUrl}}/members/update",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"members",
						"update"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Member with Existing Nickname",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('resultCode');",
							"    pm.expect(jsonData.resultCode).to.eql('0003');"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"id\": 2, \"name\": \"Updated User\", \"password\": \"newPassword\", \"nickName\": \"existingNickName\"}"
				},
				"url": {
					"raw": "{{baseUrl}}/members/update",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"members",
						"update"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Member with Non-Existent ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"pm.expect(jsonData).to.have.property('resultCode');",
							"pm.expect(jsonData.resultCode).to.eql('0001');"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"id\": 9999}"
				},
				"url": {
					"raw": "{{baseUrl}}/members/leave",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"members",
						"leave"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// ENC 헤더가 있는지 확인\r",
					"if (pm.request.headers.has(\"enc\") && pm.request.headers.get(\"enc\") === \"true\") {\r",
					"    // CryptoJS AES 복호화 함수\r",
					"    var CryptoJS = require('crypto-js');\r",
					"    const key = CryptoJS.enc.Utf8.parse(\"1234567890123456\"); // 16바이트 길이 키\r",
					"\r",
					"    // 응답을 텍스트로 변환\r",
					"    var responseBodyText = pm.response.text();\r",
					"    console.log(\"Response Body as Text: \", responseBodyText);\r",
					"\r",
					"    var responseBodyJson;\r",
					"    try {\r",
					"        responseBodyJson = JSON.parse(responseBodyText);\r",
					"    } catch (e) {\r",
					"        console.log(\"응답이 JSON 형식이 아닙니다. 원본 텍스트 그대로 처리합니다.\");\r",
					"        responseBodyJson = responseBodyText;\r",
					"    }\r",
					"\r",
					"    // Base64 디코딩된 암호화된 응답\r",
					"    var decodedEncryptedResponse = CryptoJS.enc.Base64.parse(responseBodyJson);\r",
					"\r",
					"    // 복호화 시도\r",
					"    try {\r",
					"        var decryptedBytes = CryptoJS.AES.decrypt(\r",
					"            { ciphertext: decodedEncryptedResponse },\r",
					"            key,\r",
					"            {\r",
					"                mode: CryptoJS.mode.ECB,\r",
					"                padding: CryptoJS.pad.Pkcs7\r",
					"            }\r",
					"        );\r",
					"\r",
					"        var decrypted = decryptedBytes.toString(CryptoJS.enc.Utf8);\r",
					"        responseBodyJson = JSON.parse(decrypted); // 복호화된 JSON 파싱\r",
					"\r",
					"        console.log(\"Decrypted Response: \", responseBodyJson);\r",
					"\r",
					"        // 복호화된 응답을 변수에 저장 (전역 또는 환경 변수)\r",
					"        pm.environment.set(\"decryptedResponse\", JSON.stringify(responseBodyJson));\r",
					"\r",
					"    } catch (error) {\r",
					"        console.log(\"복호화 중 오류 발생: \", error);\r",
					"    }\r",
					"}"
				]
			}
		}
	]
}